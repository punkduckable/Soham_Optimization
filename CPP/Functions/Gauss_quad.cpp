#include <iostream>
#include <cmath>
#include "Eigen/Dense"
#include <tuple>

using namespace std;
using namespace Eigen;
tuple<VectorXd, VectorXd> Gauss_quad(int order)
{
	VectorXd pts(1,1),wts(1,1);
	switch(order)
	{
		case 1:
			pts(0)=0;
			wts(0)=2;
			return make_tuple(pts,wts);
		case 2:
			pts.resize(order,1);wts.resize(order,1);
			pts(0)=-0.5773502691896257;
	        pts(1)=0.5773502691896257;
	        wts(0)=1.0000000000000000;
	        wts(1)=1.0000000000000000;
			return make_tuple(pts,wts);
		case 3:
			pts.resize(order,1);wts.resize(order,1);
			pts(0)=0.0000000000000000;
	        pts(1)=-0.7745966692414834;
	        pts(2)=0.7745966692414834;
	        wts(0)=0.8888888888888888;
	        wts(1)=0.5555555555555556;
	        wts(2)=0.5555555555555556;
			return make_tuple(pts,wts);
		case 4:
			pts.resize(order,1);wts.resize(order,1);
			pts(0)=-0.3399810435848563;
	        pts(1)=0.3399810435848563;
	        pts(2)=-0.8611363115940526;
	        pts(3)=0.8611363115940526;
	        wts(0)=0.6521451548625461;
	        wts(1)=0.6521451548625461;
	        wts(2)=0.3478548451374538;
	        wts(3)=0.3478548451374538;
			return make_tuple(pts,wts);
		case 5:
			pts.resize(order,1);wts.resize(order,1);
			pts(0)=0.0000000000000000;
	        pts(1)=-0.5384693101056831;
	        pts(2)=0.5384693101056831;
	        pts(3)=-0.9061798459386640;
	        pts(4)=0.9061798459386640;
	        wts(0)=0.5688888888888889;
	        wts(1)=0.4786286704993665;
	        wts(2)=0.4786286704993665;
	        wts(3)=0.2369268850561891;
	        wts(4)=0.2369268850561891;
			return make_tuple(pts,wts);
		case 6:
			pts.resize(order,1);wts.resize(order,1);
			pts(0)=0.6612093864662645;
	        pts(1)=-0.6612093864662645;
	        pts(2)=-0.2386191860831969;
	        pts(3)=0.2386191860831969;
	        pts(4)=-0.9324695142031521;
	        pts(5)=0.9324695142031521;
	        wts(0)=0.3607615730481386;
	        wts(1)=0.3607615730481386;
	        wts(2)=0.4679139345726910;
	        wts(3)=0.4679139345726910;
	        wts(4)=0.1713244923791704;
	        wts(5)=0.1713244923791704;
			return make_tuple(pts,wts);
		case 7:
			pts.resize(order,1);wts.resize(order,1);
			pts(0)=0.0000000000000000;
	        pts(1)=0.4058451513773972;
	        pts(2)=-0.4058451513773972;
	        pts(3)=-0.7415311855993945;
	        pts(4)=0.7415311855993945;
	        pts(5)=-0.9491079123427585;
	        pts(6)=0.9491079123427585;
	        wts(0)=0.4179591836734694;
	        wts(1)=0.3818300505051189;
	        wts(2)=0.3818300505051189;
	        wts(3)=0.2797053914892766;
	        wts(4)=0.2797053914892766;
	        wts(5)=0.1294849661688697;
	        wts(6)=0.1294849661688697;
			return make_tuple(pts,wts);
		case 8:
			pts.resize(order,1);wts.resize(order,1);
			pts(0)=-0.1834346424956498;
	        pts(1)=0.1834346424956498;
	        pts(2)=-0.5255324099163290;
	        pts(3)=0.5255324099163290;
	        pts(4)=-0.7966664774136267;
	        pts(5)=0.7966664774136267;
	        pts(6)=-0.9602898564975363;
	        pts(7)=0.9602898564975363;
	        wts(0)=0.3626837833783620;
	        wts(1)=0.3626837833783620;
	        wts(2)=0.3137066458778873;
	        wts(3)=0.3137066458778873;
	        wts(4)=0.2223810344533745;
	        wts(5)=0.2223810344533745;
	        wts(6)=0.1012285362903763;
	        wts(7)=0.1012285362903763;
			return make_tuple(pts,wts);
		case 9:
			pts.resize(order,1);wts.resize(order,1);
			pts(0)=0.0000000000000000;
	        pts(1)=-0.8360311073266358;
	        pts(2)=0.8360311073266358;
	        pts(3)=-0.9681602395076261;
	        pts(4)=0.9681602395076261;
	        pts(5)=-0.3242534234038089;
	        pts(6)=0.3242534234038089;
	        pts(7)=-0.6133714327005904;
	        pts(8)=0.6133714327005904;
	        wts(0)=0.3302393550012598;
	        wts(1)=0.1806481606948574;
	        wts(2)=0.1806481606948574;
	        wts(3)=0.0812743883615744;
	        wts(4)=0.0812743883615744;
	        wts(5)=0.3123470770400029;
	        wts(6)=0.3123470770400029;
	        wts(7)=0.2606106964029354;
	        wts(8)=0.2606106964029354;
			return make_tuple(pts,wts);
		case 10:
			pts.resize(order,1);wts.resize(order,1);
			pts(0)=-0.1488743389816312;
	        pts(1)=0.1488743389816312;
	        pts(2)=-0.4333953941292472;
	        pts(3)=0.4333953941292472;
	        pts(4)=-0.6794095682990244;
	        pts(5)=0.6794095682990244;
	        pts(6)=-0.8650633666889845;
	        pts(7)=0.8650633666889845;
	        pts(8)=-0.9739065285171717;
	        pts(9)=0.9739065285171717;
	        wts(0)=0.2955242247147529;
	        wts(1)=0.2955242247147529;
	        wts(2)=0.2692667193099963;
	        wts(3)=0.2692667193099963;
	        wts(4)=0.2190863625159820;
	        wts(5)=0.2190863625159820;
	        wts(6)=0.1494513491505806;
	        wts(7)=0.1494513491505806;
	        wts(8)=0.0666713443086881;
	        wts(9)=0.0666713443086881;
			return make_tuple(pts,wts);

	}
}
